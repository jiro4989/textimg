package parser

// Code generated by peg parser/grammer.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleroot
	ruleignore
	rulecolors
	ruletext
	rulecolor
	rulereset_color
	rulestandard_color
	ruleextended_color
	ruleextended_color_256
	ruleextended_color_rgb
	ruleextended_color_prefix
	rulezero
	rulenumber
	ruleprefix
	ruleescape_sequence
	rulecolor_suffix
	rulenon_color_suffix
	ruledelimiter
	ruleAction0
	rulePegText
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
)

var rul3s = [...]string{
	"Unknown",
	"root",
	"ignore",
	"colors",
	"text",
	"color",
	"reset_color",
	"standard_color",
	"extended_color",
	"extended_color_256",
	"extended_color_rgb",
	"extended_color_prefix",
	"zero",
	"number",
	"prefix",
	"escape_sequence",
	"color_suffix",
	"non_color_suffix",
	"delimiter",
	"Action0",
	"PegText",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Parser struct {
	ParserFunc

	Buffer string
	buffer []rune
	rules  [29]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *Parser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.pushResetColor()
		case ruleAction1:
			p.pushText(text)
		case ruleAction2:
			p.pushResetColor()
		case ruleAction3:
			p.pushStandardColorWithCategory(text)
		case ruleAction4:
			p.setExtendedColor256(text)
		case ruleAction5:
			p.setExtendedColorR(text)
		case ruleAction6:
			p.setExtendedColorG(text)
		case ruleAction7:
			p.setExtendedColorB(text)
		case ruleAction8:
			p.pushExtendedColor(text)

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*Parser) error {
	return func(p *Parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Parser) error {
	return func(p *Parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Parser) Init(options ...func(*Parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 root <- <(ignore / colors / text)*> */
		func() bool {
			{
				position1 := position
			l2:
				{
					position3, tokenIndex3 := position, tokenIndex
					{
						position4, tokenIndex4 := position, tokenIndex
						if !_rules[ruleignore]() {
							goto l5
						}
						goto l4
					l5:
						position, tokenIndex = position4, tokenIndex4
						if !_rules[rulecolors]() {
							goto l6
						}
						goto l4
					l6:
						position, tokenIndex = position4, tokenIndex4
						if !_rules[ruletext]() {
							goto l3
						}
					}
				l4:
					goto l2
				l3:
					position, tokenIndex = position3, tokenIndex3
				}
				add(ruleroot, position1)
			}
			return true
		},
		/* 1 ignore <- <(prefix number non_color_suffix)> */
		func() bool {
			position7, tokenIndex7 := position, tokenIndex
			{
				position8 := position
				if !_rules[ruleprefix]() {
					goto l7
				}
				if !_rules[rulenumber]() {
					goto l7
				}
				if !_rules[rulenon_color_suffix]() {
					goto l7
				}
				add(ruleignore, position8)
			}
			return true
		l7:
			position, tokenIndex = position7, tokenIndex7
			return false
		},
		/* 2 colors <- <((prefix color_suffix Action0) / (prefix color (delimiter color)* color_suffix))> */
		func() bool {
			position9, tokenIndex9 := position, tokenIndex
			{
				position10 := position
				{
					position11, tokenIndex11 := position, tokenIndex
					if !_rules[ruleprefix]() {
						goto l12
					}
					if !_rules[rulecolor_suffix]() {
						goto l12
					}
					if !_rules[ruleAction0]() {
						goto l12
					}
					goto l11
				l12:
					position, tokenIndex = position11, tokenIndex11
					if !_rules[ruleprefix]() {
						goto l9
					}
					if !_rules[rulecolor]() {
						goto l9
					}
				l13:
					{
						position14, tokenIndex14 := position, tokenIndex
						if !_rules[ruledelimiter]() {
							goto l14
						}
						if !_rules[rulecolor]() {
							goto l14
						}
						goto l13
					l14:
						position, tokenIndex = position14, tokenIndex14
					}
					if !_rules[rulecolor_suffix]() {
						goto l9
					}
				}
			l11:
				add(rulecolors, position10)
			}
			return true
		l9:
			position, tokenIndex = position9, tokenIndex9
			return false
		},
		/* 3 text <- <(<(!'\x1b' .)+> Action1)> */
		func() bool {
			position15, tokenIndex15 := position, tokenIndex
			{
				position16 := position
				{
					position17 := position
					{
						position20, tokenIndex20 := position, tokenIndex
						if buffer[position] != rune('\x1b') {
							goto l20
						}
						position++
						goto l15
					l20:
						position, tokenIndex = position20, tokenIndex20
					}
					if !matchDot() {
						goto l15
					}
				l18:
					{
						position19, tokenIndex19 := position, tokenIndex
						{
							position21, tokenIndex21 := position, tokenIndex
							if buffer[position] != rune('\x1b') {
								goto l21
							}
							position++
							goto l19
						l21:
							position, tokenIndex = position21, tokenIndex21
						}
						if !matchDot() {
							goto l19
						}
						goto l18
					l19:
						position, tokenIndex = position19, tokenIndex19
					}
					add(rulePegText, position17)
				}
				if !_rules[ruleAction1]() {
					goto l15
				}
				add(ruletext, position16)
			}
			return true
		l15:
			position, tokenIndex = position15, tokenIndex15
			return false
		},
		/* 4 color <- <(standard_color / extended_color / reset_color)> */
		func() bool {
			position22, tokenIndex22 := position, tokenIndex
			{
				position23 := position
				{
					position24, tokenIndex24 := position, tokenIndex
					if !_rules[rulestandard_color]() {
						goto l25
					}
					goto l24
				l25:
					position, tokenIndex = position24, tokenIndex24
					if !_rules[ruleextended_color]() {
						goto l26
					}
					goto l24
				l26:
					position, tokenIndex = position24, tokenIndex24
					if !_rules[rulereset_color]() {
						goto l22
					}
				}
			l24:
				add(rulecolor, position23)
			}
			return true
		l22:
			position, tokenIndex = position22, tokenIndex22
			return false
		},
		/* 5 reset_color <- <('0'+ Action2)> */
		func() bool {
			position27, tokenIndex27 := position, tokenIndex
			{
				position28 := position
				if buffer[position] != rune('0') {
					goto l27
				}
				position++
			l29:
				{
					position30, tokenIndex30 := position, tokenIndex
					if buffer[position] != rune('0') {
						goto l30
					}
					position++
					goto l29
				l30:
					position, tokenIndex = position30, tokenIndex30
				}
				if !_rules[ruleAction2]() {
					goto l27
				}
				add(rulereset_color, position28)
			}
			return true
		l27:
			position, tokenIndex = position27, tokenIndex27
			return false
		},
		/* 6 standard_color <- <(zero <(('3' / '4' / '9' / ('1' '0')) [0-7])> Action3)> */
		func() bool {
			position31, tokenIndex31 := position, tokenIndex
			{
				position32 := position
				if !_rules[rulezero]() {
					goto l31
				}
				{
					position33 := position
					{
						position34, tokenIndex34 := position, tokenIndex
						if buffer[position] != rune('3') {
							goto l35
						}
						position++
						goto l34
					l35:
						position, tokenIndex = position34, tokenIndex34
						if buffer[position] != rune('4') {
							goto l36
						}
						position++
						goto l34
					l36:
						position, tokenIndex = position34, tokenIndex34
						if buffer[position] != rune('9') {
							goto l37
						}
						position++
						goto l34
					l37:
						position, tokenIndex = position34, tokenIndex34
						if buffer[position] != rune('1') {
							goto l31
						}
						position++
						if buffer[position] != rune('0') {
							goto l31
						}
						position++
					}
				l34:
					if c := buffer[position]; c < rune('0') || c > rune('7') {
						goto l31
					}
					position++
					add(rulePegText, position33)
				}
				if !_rules[ruleAction3]() {
					goto l31
				}
				add(rulestandard_color, position32)
			}
			return true
		l31:
			position, tokenIndex = position31, tokenIndex31
			return false
		},
		/* 7 extended_color <- <(extended_color_256 / extended_color_rgb)> */
		func() bool {
			position38, tokenIndex38 := position, tokenIndex
			{
				position39 := position
				{
					position40, tokenIndex40 := position, tokenIndex
					if !_rules[ruleextended_color_256]() {
						goto l41
					}
					goto l40
				l41:
					position, tokenIndex = position40, tokenIndex40
					if !_rules[ruleextended_color_rgb]() {
						goto l38
					}
				}
			l40:
				add(ruleextended_color, position39)
			}
			return true
		l38:
			position, tokenIndex = position38, tokenIndex38
			return false
		},
		/* 8 extended_color_256 <- <(extended_color_prefix delimiter zero '5' delimiter <number> Action4)> */
		func() bool {
			position42, tokenIndex42 := position, tokenIndex
			{
				position43 := position
				if !_rules[ruleextended_color_prefix]() {
					goto l42
				}
				if !_rules[ruledelimiter]() {
					goto l42
				}
				if !_rules[rulezero]() {
					goto l42
				}
				if buffer[position] != rune('5') {
					goto l42
				}
				position++
				if !_rules[ruledelimiter]() {
					goto l42
				}
				{
					position44 := position
					if !_rules[rulenumber]() {
						goto l42
					}
					add(rulePegText, position44)
				}
				if !_rules[ruleAction4]() {
					goto l42
				}
				add(ruleextended_color_256, position43)
			}
			return true
		l42:
			position, tokenIndex = position42, tokenIndex42
			return false
		},
		/* 9 extended_color_rgb <- <(extended_color_prefix delimiter zero '2' delimiter <number> Action5 delimiter <number> Action6 delimiter <number> Action7)> */
		func() bool {
			position45, tokenIndex45 := position, tokenIndex
			{
				position46 := position
				if !_rules[ruleextended_color_prefix]() {
					goto l45
				}
				if !_rules[ruledelimiter]() {
					goto l45
				}
				if !_rules[rulezero]() {
					goto l45
				}
				if buffer[position] != rune('2') {
					goto l45
				}
				position++
				if !_rules[ruledelimiter]() {
					goto l45
				}
				{
					position47 := position
					if !_rules[rulenumber]() {
						goto l45
					}
					add(rulePegText, position47)
				}
				if !_rules[ruleAction5]() {
					goto l45
				}
				if !_rules[ruledelimiter]() {
					goto l45
				}
				{
					position48 := position
					if !_rules[rulenumber]() {
						goto l45
					}
					add(rulePegText, position48)
				}
				if !_rules[ruleAction6]() {
					goto l45
				}
				if !_rules[ruledelimiter]() {
					goto l45
				}
				{
					position49 := position
					if !_rules[rulenumber]() {
						goto l45
					}
					add(rulePegText, position49)
				}
				if !_rules[ruleAction7]() {
					goto l45
				}
				add(ruleextended_color_rgb, position46)
			}
			return true
		l45:
			position, tokenIndex = position45, tokenIndex45
			return false
		},
		/* 10 extended_color_prefix <- <(zero <(('3' / '4') '8')> Action8)> */
		func() bool {
			position50, tokenIndex50 := position, tokenIndex
			{
				position51 := position
				if !_rules[rulezero]() {
					goto l50
				}
				{
					position52 := position
					{
						position53, tokenIndex53 := position, tokenIndex
						if buffer[position] != rune('3') {
							goto l54
						}
						position++
						goto l53
					l54:
						position, tokenIndex = position53, tokenIndex53
						if buffer[position] != rune('4') {
							goto l50
						}
						position++
					}
				l53:
					if buffer[position] != rune('8') {
						goto l50
					}
					position++
					add(rulePegText, position52)
				}
				if !_rules[ruleAction8]() {
					goto l50
				}
				add(ruleextended_color_prefix, position51)
			}
			return true
		l50:
			position, tokenIndex = position50, tokenIndex50
			return false
		},
		/* 11 zero <- <'0'*> */
		func() bool {
			{
				position56 := position
			l57:
				{
					position58, tokenIndex58 := position, tokenIndex
					if buffer[position] != rune('0') {
						goto l58
					}
					position++
					goto l57
				l58:
					position, tokenIndex = position58, tokenIndex58
				}
				add(rulezero, position56)
			}
			return true
		},
		/* 12 number <- <[0-9]+> */
		func() bool {
			position59, tokenIndex59 := position, tokenIndex
			{
				position60 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l59
				}
				position++
			l61:
				{
					position62, tokenIndex62 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l62
					}
					position++
					goto l61
				l62:
					position, tokenIndex = position62, tokenIndex62
				}
				add(rulenumber, position60)
			}
			return true
		l59:
			position, tokenIndex = position59, tokenIndex59
			return false
		},
		/* 13 prefix <- <(escape_sequence '[')> */
		func() bool {
			position63, tokenIndex63 := position, tokenIndex
			{
				position64 := position
				if !_rules[ruleescape_sequence]() {
					goto l63
				}
				if buffer[position] != rune('[') {
					goto l63
				}
				position++
				add(ruleprefix, position64)
			}
			return true
		l63:
			position, tokenIndex = position63, tokenIndex63
			return false
		},
		/* 14 escape_sequence <- <'\x1b'> */
		func() bool {
			position65, tokenIndex65 := position, tokenIndex
			{
				position66 := position
				if buffer[position] != rune('\x1b') {
					goto l65
				}
				position++
				add(ruleescape_sequence, position66)
			}
			return true
		l65:
			position, tokenIndex = position65, tokenIndex65
			return false
		},
		/* 15 color_suffix <- <'m'> */
		func() bool {
			position67, tokenIndex67 := position, tokenIndex
			{
				position68 := position
				if buffer[position] != rune('m') {
					goto l67
				}
				position++
				add(rulecolor_suffix, position68)
			}
			return true
		l67:
			position, tokenIndex = position67, tokenIndex67
			return false
		},
		/* 16 non_color_suffix <- <([A-H] / 'f' / 'S' / 'T' / 'J' / 'K')> */
		func() bool {
			position69, tokenIndex69 := position, tokenIndex
			{
				position70 := position
				{
					position71, tokenIndex71 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('H') {
						goto l72
					}
					position++
					goto l71
				l72:
					position, tokenIndex = position71, tokenIndex71
					if buffer[position] != rune('f') {
						goto l73
					}
					position++
					goto l71
				l73:
					position, tokenIndex = position71, tokenIndex71
					if buffer[position] != rune('S') {
						goto l74
					}
					position++
					goto l71
				l74:
					position, tokenIndex = position71, tokenIndex71
					if buffer[position] != rune('T') {
						goto l75
					}
					position++
					goto l71
				l75:
					position, tokenIndex = position71, tokenIndex71
					if buffer[position] != rune('J') {
						goto l76
					}
					position++
					goto l71
				l76:
					position, tokenIndex = position71, tokenIndex71
					if buffer[position] != rune('K') {
						goto l69
					}
					position++
				}
			l71:
				add(rulenon_color_suffix, position70)
			}
			return true
		l69:
			position, tokenIndex = position69, tokenIndex69
			return false
		},
		/* 17 delimiter <- <';'> */
		func() bool {
			position77, tokenIndex77 := position, tokenIndex
			{
				position78 := position
				if buffer[position] != rune(';') {
					goto l77
				}
				position++
				add(ruledelimiter, position78)
			}
			return true
		l77:
			position, tokenIndex = position77, tokenIndex77
			return false
		},
		/* 19 Action0 <- <{ p.pushResetColor() }> */
		func() bool {
			{
				add(ruleAction0, position)
			}
			return true
		},
		nil,
		/* 21 Action1 <- <{ p.pushText(text) }> */
		func() bool {
			{
				add(ruleAction1, position)
			}
			return true
		},
		/* 22 Action2 <- <{ p.pushResetColor() }> */
		func() bool {
			{
				add(ruleAction2, position)
			}
			return true
		},
		/* 23 Action3 <- <{ p.pushStandardColorWithCategory(text) }> */
		func() bool {
			{
				add(ruleAction3, position)
			}
			return true
		},
		/* 24 Action4 <- <{ p.setExtendedColor256(text) }> */
		func() bool {
			{
				add(ruleAction4, position)
			}
			return true
		},
		/* 25 Action5 <- <{ p.setExtendedColorR(text) }> */
		func() bool {
			{
				add(ruleAction5, position)
			}
			return true
		},
		/* 26 Action6 <- <{ p.setExtendedColorG(text) }> */
		func() bool {
			{
				add(ruleAction6, position)
			}
			return true
		},
		/* 27 Action7 <- <{ p.setExtendedColorB(text) }> */
		func() bool {
			{
				add(ruleAction7, position)
			}
			return true
		},
		/* 28 Action8 <- <{ p.pushExtendedColor(text) }> */
		func() bool {
			{
				add(ruleAction8, position)
			}
			return true
		},
	}
	p.rules = _rules
	return nil
}
