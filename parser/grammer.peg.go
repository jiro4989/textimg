package parser

// Code generated by peg parser/grammer.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleroot
	ruleignore
	rulecolors
	ruletext
	rulecolor
	rulestandard_color
	ruleextended_color
	ruleextended_color_256
	ruleextended_color_rgb
	ruleextended_color_prefix
	ruletext_attributes
	rulezero
	rulenumber
	ruleprefix
	ruleescape_sequence
	rulecolor_suffix
	rulenon_color_suffix
	ruledelimiter
	ruleAction0
	rulePegText
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
)

var rul3s = [...]string{
	"Unknown",
	"root",
	"ignore",
	"colors",
	"text",
	"color",
	"standard_color",
	"extended_color",
	"extended_color_256",
	"extended_color_rgb",
	"extended_color_prefix",
	"text_attributes",
	"zero",
	"number",
	"prefix",
	"escape_sequence",
	"color_suffix",
	"non_color_suffix",
	"delimiter",
	"Action0",
	"PegText",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Parser struct {
	ParserFunc

	Buffer string
	buffer []rune
	rules  [32]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *Parser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.pushResetColor()
		case ruleAction1:
			p.pushText(text)
		case ruleAction2:
			p.pushStandardColorWithCategory(text)
		case ruleAction3:
			p.pushResetForegroundColor()
		case ruleAction4:
			p.pushResetBackgroundColor()
		case ruleAction5:
			p.setExtendedColor256(text)
		case ruleAction6:
			p.setExtendedColorR(text)
		case ruleAction7:
			p.setExtendedColorG(text)
		case ruleAction8:
			p.setExtendedColorB(text)
		case ruleAction9:
			p.pushExtendedColor(text)
		case ruleAction10:
			p.pushResetColor()
		case ruleAction11:
			p.pushReverseColor()

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*Parser) error {
	return func(p *Parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Parser) error {
	return func(p *Parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Parser) Init(options ...func(*Parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 root <- <(colors / ignore / text)*> */
		func() bool {
			{
				position1 := position
			l2:
				{
					position3, tokenIndex3 := position, tokenIndex
					{
						position4, tokenIndex4 := position, tokenIndex
						if !_rules[rulecolors]() {
							goto l5
						}
						goto l4
					l5:
						position, tokenIndex = position4, tokenIndex4
						if !_rules[ruleignore]() {
							goto l6
						}
						goto l4
					l6:
						position, tokenIndex = position4, tokenIndex4
						if !_rules[ruletext]() {
							goto l3
						}
					}
				l4:
					goto l2
				l3:
					position, tokenIndex = position3, tokenIndex3
				}
				add(ruleroot, position1)
			}
			return true
		},
		/* 1 ignore <- <((prefix number non_color_suffix) / escape_sequence)> */
		func() bool {
			position7, tokenIndex7 := position, tokenIndex
			{
				position8 := position
				{
					position9, tokenIndex9 := position, tokenIndex
					if !_rules[ruleprefix]() {
						goto l10
					}
					if !_rules[rulenumber]() {
						goto l10
					}
					if !_rules[rulenon_color_suffix]() {
						goto l10
					}
					goto l9
				l10:
					position, tokenIndex = position9, tokenIndex9
					if !_rules[ruleescape_sequence]() {
						goto l7
					}
				}
			l9:
				add(ruleignore, position8)
			}
			return true
		l7:
			position, tokenIndex = position7, tokenIndex7
			return false
		},
		/* 2 colors <- <((prefix color_suffix Action0) / (prefix color (delimiter color)* color_suffix))> */
		func() bool {
			position11, tokenIndex11 := position, tokenIndex
			{
				position12 := position
				{
					position13, tokenIndex13 := position, tokenIndex
					if !_rules[ruleprefix]() {
						goto l14
					}
					if !_rules[rulecolor_suffix]() {
						goto l14
					}
					if !_rules[ruleAction0]() {
						goto l14
					}
					goto l13
				l14:
					position, tokenIndex = position13, tokenIndex13
					if !_rules[ruleprefix]() {
						goto l11
					}
					if !_rules[rulecolor]() {
						goto l11
					}
				l15:
					{
						position16, tokenIndex16 := position, tokenIndex
						if !_rules[ruledelimiter]() {
							goto l16
						}
						if !_rules[rulecolor]() {
							goto l16
						}
						goto l15
					l16:
						position, tokenIndex = position16, tokenIndex16
					}
					if !_rules[rulecolor_suffix]() {
						goto l11
					}
				}
			l13:
				add(rulecolors, position12)
			}
			return true
		l11:
			position, tokenIndex = position11, tokenIndex11
			return false
		},
		/* 3 text <- <(<(!'\x1b' .)+> Action1)> */
		func() bool {
			position17, tokenIndex17 := position, tokenIndex
			{
				position18 := position
				{
					position19 := position
					{
						position22, tokenIndex22 := position, tokenIndex
						if buffer[position] != rune('\x1b') {
							goto l22
						}
						position++
						goto l17
					l22:
						position, tokenIndex = position22, tokenIndex22
					}
					if !matchDot() {
						goto l17
					}
				l20:
					{
						position21, tokenIndex21 := position, tokenIndex
						{
							position23, tokenIndex23 := position, tokenIndex
							if buffer[position] != rune('\x1b') {
								goto l23
							}
							position++
							goto l21
						l23:
							position, tokenIndex = position23, tokenIndex23
						}
						if !matchDot() {
							goto l21
						}
						goto l20
					l21:
						position, tokenIndex = position21, tokenIndex21
					}
					add(rulePegText, position19)
				}
				if !_rules[ruleAction1]() {
					goto l17
				}
				add(ruletext, position18)
			}
			return true
		l17:
			position, tokenIndex = position17, tokenIndex17
			return false
		},
		/* 4 color <- <(standard_color / extended_color / text_attributes)> */
		func() bool {
			position24, tokenIndex24 := position, tokenIndex
			{
				position25 := position
				{
					position26, tokenIndex26 := position, tokenIndex
					if !_rules[rulestandard_color]() {
						goto l27
					}
					goto l26
				l27:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[ruleextended_color]() {
						goto l28
					}
					goto l26
				l28:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[ruletext_attributes]() {
						goto l24
					}
				}
			l26:
				add(rulecolor, position25)
			}
			return true
		l24:
			position, tokenIndex = position24, tokenIndex24
			return false
		},
		/* 5 standard_color <- <((zero <(('3' / '4' / '9' / ('1' '0')) [0-7])> Action2) / (zero <(('3' / '9') '9')> Action3) / (zero <(('4' / ('1' '0')) '9')> Action4))> */
		func() bool {
			position29, tokenIndex29 := position, tokenIndex
			{
				position30 := position
				{
					position31, tokenIndex31 := position, tokenIndex
					if !_rules[rulezero]() {
						goto l32
					}
					{
						position33 := position
						{
							position34, tokenIndex34 := position, tokenIndex
							if buffer[position] != rune('3') {
								goto l35
							}
							position++
							goto l34
						l35:
							position, tokenIndex = position34, tokenIndex34
							if buffer[position] != rune('4') {
								goto l36
							}
							position++
							goto l34
						l36:
							position, tokenIndex = position34, tokenIndex34
							if buffer[position] != rune('9') {
								goto l37
							}
							position++
							goto l34
						l37:
							position, tokenIndex = position34, tokenIndex34
							if buffer[position] != rune('1') {
								goto l32
							}
							position++
							if buffer[position] != rune('0') {
								goto l32
							}
							position++
						}
					l34:
						if c := buffer[position]; c < rune('0') || c > rune('7') {
							goto l32
						}
						position++
						add(rulePegText, position33)
					}
					if !_rules[ruleAction2]() {
						goto l32
					}
					goto l31
				l32:
					position, tokenIndex = position31, tokenIndex31
					if !_rules[rulezero]() {
						goto l38
					}
					{
						position39 := position
						{
							position40, tokenIndex40 := position, tokenIndex
							if buffer[position] != rune('3') {
								goto l41
							}
							position++
							goto l40
						l41:
							position, tokenIndex = position40, tokenIndex40
							if buffer[position] != rune('9') {
								goto l38
							}
							position++
						}
					l40:
						if buffer[position] != rune('9') {
							goto l38
						}
						position++
						add(rulePegText, position39)
					}
					if !_rules[ruleAction3]() {
						goto l38
					}
					goto l31
				l38:
					position, tokenIndex = position31, tokenIndex31
					if !_rules[rulezero]() {
						goto l29
					}
					{
						position42 := position
						{
							position43, tokenIndex43 := position, tokenIndex
							if buffer[position] != rune('4') {
								goto l44
							}
							position++
							goto l43
						l44:
							position, tokenIndex = position43, tokenIndex43
							if buffer[position] != rune('1') {
								goto l29
							}
							position++
							if buffer[position] != rune('0') {
								goto l29
							}
							position++
						}
					l43:
						if buffer[position] != rune('9') {
							goto l29
						}
						position++
						add(rulePegText, position42)
					}
					if !_rules[ruleAction4]() {
						goto l29
					}
				}
			l31:
				add(rulestandard_color, position30)
			}
			return true
		l29:
			position, tokenIndex = position29, tokenIndex29
			return false
		},
		/* 6 extended_color <- <(extended_color_256 / extended_color_rgb)> */
		func() bool {
			position45, tokenIndex45 := position, tokenIndex
			{
				position46 := position
				{
					position47, tokenIndex47 := position, tokenIndex
					if !_rules[ruleextended_color_256]() {
						goto l48
					}
					goto l47
				l48:
					position, tokenIndex = position47, tokenIndex47
					if !_rules[ruleextended_color_rgb]() {
						goto l45
					}
				}
			l47:
				add(ruleextended_color, position46)
			}
			return true
		l45:
			position, tokenIndex = position45, tokenIndex45
			return false
		},
		/* 7 extended_color_256 <- <(extended_color_prefix delimiter zero '5' delimiter <number> Action5)> */
		func() bool {
			position49, tokenIndex49 := position, tokenIndex
			{
				position50 := position
				if !_rules[ruleextended_color_prefix]() {
					goto l49
				}
				if !_rules[ruledelimiter]() {
					goto l49
				}
				if !_rules[rulezero]() {
					goto l49
				}
				if buffer[position] != rune('5') {
					goto l49
				}
				position++
				if !_rules[ruledelimiter]() {
					goto l49
				}
				{
					position51 := position
					if !_rules[rulenumber]() {
						goto l49
					}
					add(rulePegText, position51)
				}
				if !_rules[ruleAction5]() {
					goto l49
				}
				add(ruleextended_color_256, position50)
			}
			return true
		l49:
			position, tokenIndex = position49, tokenIndex49
			return false
		},
		/* 8 extended_color_rgb <- <(extended_color_prefix delimiter zero '2' delimiter <number> Action6 delimiter <number> Action7 delimiter <number> Action8)> */
		func() bool {
			position52, tokenIndex52 := position, tokenIndex
			{
				position53 := position
				if !_rules[ruleextended_color_prefix]() {
					goto l52
				}
				if !_rules[ruledelimiter]() {
					goto l52
				}
				if !_rules[rulezero]() {
					goto l52
				}
				if buffer[position] != rune('2') {
					goto l52
				}
				position++
				if !_rules[ruledelimiter]() {
					goto l52
				}
				{
					position54 := position
					if !_rules[rulenumber]() {
						goto l52
					}
					add(rulePegText, position54)
				}
				if !_rules[ruleAction6]() {
					goto l52
				}
				if !_rules[ruledelimiter]() {
					goto l52
				}
				{
					position55 := position
					if !_rules[rulenumber]() {
						goto l52
					}
					add(rulePegText, position55)
				}
				if !_rules[ruleAction7]() {
					goto l52
				}
				if !_rules[ruledelimiter]() {
					goto l52
				}
				{
					position56 := position
					if !_rules[rulenumber]() {
						goto l52
					}
					add(rulePegText, position56)
				}
				if !_rules[ruleAction8]() {
					goto l52
				}
				add(ruleextended_color_rgb, position53)
			}
			return true
		l52:
			position, tokenIndex = position52, tokenIndex52
			return false
		},
		/* 9 extended_color_prefix <- <(zero <(('3' / '4') '8')> Action9)> */
		func() bool {
			position57, tokenIndex57 := position, tokenIndex
			{
				position58 := position
				if !_rules[rulezero]() {
					goto l57
				}
				{
					position59 := position
					{
						position60, tokenIndex60 := position, tokenIndex
						if buffer[position] != rune('3') {
							goto l61
						}
						position++
						goto l60
					l61:
						position, tokenIndex = position60, tokenIndex60
						if buffer[position] != rune('4') {
							goto l57
						}
						position++
					}
				l60:
					if buffer[position] != rune('8') {
						goto l57
					}
					position++
					add(rulePegText, position59)
				}
				if !_rules[ruleAction9]() {
					goto l57
				}
				add(ruleextended_color_prefix, position58)
			}
			return true
		l57:
			position, tokenIndex = position57, tokenIndex57
			return false
		},
		/* 10 text_attributes <- <(('0' Action10) / ('7' Action11) / ('1' / '4' / '5' / '8'))+> */
		func() bool {
			position62, tokenIndex62 := position, tokenIndex
			{
				position63 := position
				{
					position66, tokenIndex66 := position, tokenIndex
					if buffer[position] != rune('0') {
						goto l67
					}
					position++
					if !_rules[ruleAction10]() {
						goto l67
					}
					goto l66
				l67:
					position, tokenIndex = position66, tokenIndex66
					if buffer[position] != rune('7') {
						goto l68
					}
					position++
					if !_rules[ruleAction11]() {
						goto l68
					}
					goto l66
				l68:
					position, tokenIndex = position66, tokenIndex66
					{
						position69, tokenIndex69 := position, tokenIndex
						if buffer[position] != rune('1') {
							goto l70
						}
						position++
						goto l69
					l70:
						position, tokenIndex = position69, tokenIndex69
						if buffer[position] != rune('4') {
							goto l71
						}
						position++
						goto l69
					l71:
						position, tokenIndex = position69, tokenIndex69
						if buffer[position] != rune('5') {
							goto l72
						}
						position++
						goto l69
					l72:
						position, tokenIndex = position69, tokenIndex69
						if buffer[position] != rune('8') {
							goto l62
						}
						position++
					}
				l69:
				}
			l66:
			l64:
				{
					position65, tokenIndex65 := position, tokenIndex
					{
						position73, tokenIndex73 := position, tokenIndex
						if buffer[position] != rune('0') {
							goto l74
						}
						position++
						if !_rules[ruleAction10]() {
							goto l74
						}
						goto l73
					l74:
						position, tokenIndex = position73, tokenIndex73
						if buffer[position] != rune('7') {
							goto l75
						}
						position++
						if !_rules[ruleAction11]() {
							goto l75
						}
						goto l73
					l75:
						position, tokenIndex = position73, tokenIndex73
						{
							position76, tokenIndex76 := position, tokenIndex
							if buffer[position] != rune('1') {
								goto l77
							}
							position++
							goto l76
						l77:
							position, tokenIndex = position76, tokenIndex76
							if buffer[position] != rune('4') {
								goto l78
							}
							position++
							goto l76
						l78:
							position, tokenIndex = position76, tokenIndex76
							if buffer[position] != rune('5') {
								goto l79
							}
							position++
							goto l76
						l79:
							position, tokenIndex = position76, tokenIndex76
							if buffer[position] != rune('8') {
								goto l65
							}
							position++
						}
					l76:
					}
				l73:
					goto l64
				l65:
					position, tokenIndex = position65, tokenIndex65
				}
				add(ruletext_attributes, position63)
			}
			return true
		l62:
			position, tokenIndex = position62, tokenIndex62
			return false
		},
		/* 11 zero <- <'0'*> */
		func() bool {
			{
				position81 := position
			l82:
				{
					position83, tokenIndex83 := position, tokenIndex
					if buffer[position] != rune('0') {
						goto l83
					}
					position++
					goto l82
				l83:
					position, tokenIndex = position83, tokenIndex83
				}
				add(rulezero, position81)
			}
			return true
		},
		/* 12 number <- <[0-9]+> */
		func() bool {
			position84, tokenIndex84 := position, tokenIndex
			{
				position85 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l84
				}
				position++
			l86:
				{
					position87, tokenIndex87 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l87
					}
					position++
					goto l86
				l87:
					position, tokenIndex = position87, tokenIndex87
				}
				add(rulenumber, position85)
			}
			return true
		l84:
			position, tokenIndex = position84, tokenIndex84
			return false
		},
		/* 13 prefix <- <(escape_sequence '[')> */
		func() bool {
			position88, tokenIndex88 := position, tokenIndex
			{
				position89 := position
				if !_rules[ruleescape_sequence]() {
					goto l88
				}
				if buffer[position] != rune('[') {
					goto l88
				}
				position++
				add(ruleprefix, position89)
			}
			return true
		l88:
			position, tokenIndex = position88, tokenIndex88
			return false
		},
		/* 14 escape_sequence <- <'\x1b'> */
		func() bool {
			position90, tokenIndex90 := position, tokenIndex
			{
				position91 := position
				if buffer[position] != rune('\x1b') {
					goto l90
				}
				position++
				add(ruleescape_sequence, position91)
			}
			return true
		l90:
			position, tokenIndex = position90, tokenIndex90
			return false
		},
		/* 15 color_suffix <- <'m'> */
		func() bool {
			position92, tokenIndex92 := position, tokenIndex
			{
				position93 := position
				if buffer[position] != rune('m') {
					goto l92
				}
				position++
				add(rulecolor_suffix, position93)
			}
			return true
		l92:
			position, tokenIndex = position92, tokenIndex92
			return false
		},
		/* 16 non_color_suffix <- <([A-H] / 'f' / 'S' / 'T' / 'J' / 'K')> */
		func() bool {
			position94, tokenIndex94 := position, tokenIndex
			{
				position95 := position
				{
					position96, tokenIndex96 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('H') {
						goto l97
					}
					position++
					goto l96
				l97:
					position, tokenIndex = position96, tokenIndex96
					if buffer[position] != rune('f') {
						goto l98
					}
					position++
					goto l96
				l98:
					position, tokenIndex = position96, tokenIndex96
					if buffer[position] != rune('S') {
						goto l99
					}
					position++
					goto l96
				l99:
					position, tokenIndex = position96, tokenIndex96
					if buffer[position] != rune('T') {
						goto l100
					}
					position++
					goto l96
				l100:
					position, tokenIndex = position96, tokenIndex96
					if buffer[position] != rune('J') {
						goto l101
					}
					position++
					goto l96
				l101:
					position, tokenIndex = position96, tokenIndex96
					if buffer[position] != rune('K') {
						goto l94
					}
					position++
				}
			l96:
				add(rulenon_color_suffix, position95)
			}
			return true
		l94:
			position, tokenIndex = position94, tokenIndex94
			return false
		},
		/* 17 delimiter <- <';'> */
		func() bool {
			position102, tokenIndex102 := position, tokenIndex
			{
				position103 := position
				if buffer[position] != rune(';') {
					goto l102
				}
				position++
				add(ruledelimiter, position103)
			}
			return true
		l102:
			position, tokenIndex = position102, tokenIndex102
			return false
		},
		/* 19 Action0 <- <{ p.pushResetColor() }> */
		func() bool {
			{
				add(ruleAction0, position)
			}
			return true
		},
		nil,
		/* 21 Action1 <- <{ p.pushText(text) }> */
		func() bool {
			{
				add(ruleAction1, position)
			}
			return true
		},
		/* 22 Action2 <- <{ p.pushStandardColorWithCategory(text) }> */
		func() bool {
			{
				add(ruleAction2, position)
			}
			return true
		},
		/* 23 Action3 <- <{ p.pushResetForegroundColor() }> */
		func() bool {
			{
				add(ruleAction3, position)
			}
			return true
		},
		/* 24 Action4 <- <{ p.pushResetBackgroundColor() }> */
		func() bool {
			{
				add(ruleAction4, position)
			}
			return true
		},
		/* 25 Action5 <- <{ p.setExtendedColor256(text) }> */
		func() bool {
			{
				add(ruleAction5, position)
			}
			return true
		},
		/* 26 Action6 <- <{ p.setExtendedColorR(text) }> */
		func() bool {
			{
				add(ruleAction6, position)
			}
			return true
		},
		/* 27 Action7 <- <{ p.setExtendedColorG(text) }> */
		func() bool {
			{
				add(ruleAction7, position)
			}
			return true
		},
		/* 28 Action8 <- <{ p.setExtendedColorB(text) }> */
		func() bool {
			{
				add(ruleAction8, position)
			}
			return true
		},
		/* 29 Action9 <- <{ p.pushExtendedColor(text) }> */
		func() bool {
			{
				add(ruleAction9, position)
			}
			return true
		},
		/* 30 Action10 <- <{ p.pushResetColor() }> */
		func() bool {
			{
				add(ruleAction10, position)
			}
			return true
		},
		/* 31 Action11 <- <{ p.pushReverseColor() }> */
		func() bool {
			{
				add(ruleAction11, position)
			}
			return true
		},
	}
	p.rules = _rules
	return nil
}
