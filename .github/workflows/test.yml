name: test

on:
  push:
    branches:
      - master
    paths-ignore:
      - README*
      - LICENSE
  pull_request:
    paths-ignore:
      - README*
      - LICENSE

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go:
          - '1.16'
          - '1.17'
          - '1.x'
    name: build go ${{ matrix.go }}
    steps:
      - uses: actions/checkout@v2.4.0
      - uses: actions/setup-go@v2.2.0
        with:
          go-version: ${{ matrix.go }}
      - run: go build
      - run: go install

  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.4.0
      - uses: actions/setup-go@v2.2.0
        with:
          go-version: '1.16'
      - name: Check code format
        run: |
          go mod download
          count="$(go fmt ./... | wc -l)"
          if [[ "$count" -ne 0 ]]; then
            echo "[ERR] 'go fmt ./...' してください" >&2
            exit 1
          fi

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go:
          - '1.16'
          - '1.17'
    steps:
      - uses: actions/checkout@v2.4.0
      - name: Tests
        run: |
          docker-compose build --build-arg GO_VERSION=${{ matrix.go }} base
          make docker-test

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.4.0
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.29

  coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.4.0
      - name: Build base image
        run: docker-compose run coverage
      - uses: codecov/codecov-action@v2.1.0
