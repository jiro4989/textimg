name: release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  app: textimg
  goversion: '1.16'
  build_opts: '-ldflags="-s -w -extldflags \"-static\""'

jobs:
  build-artifact:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, windows, darwin]
        arch: [amd64]
    steps:
      - uses: actions/checkout@v2.4.0
      - uses: actions/setup-go@v2.1.5
        with:
          go-version: ${{ env.goversion }}
      - name: Build
        run: |
          go build ${{ env.build_opts }}
          if [[ $GOOS = windows ]]; then
            7z a ${{ env.app }}-$GOOS-$GOARCH.zip ./${{ env.app }}.exe
          else
            tar czf ${{ env.app }}-$GOOS-$GOARCH.tar.gz ./${{ env.app }}
          fi
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}

      - name: Upload artifact (windows)
        uses: actions/upload-artifact@v2
        with:
          name: artifact-${{ matrix.os }}-${{ matrix.arch }}
          path: ${{ env.app }}-${{ matrix.os }}-${{ matrix.arch }}.zip
        if: matrix.os == 'windows'

      - name: Upload artifact (unix)
        uses: actions/upload-artifact@v2
        with:
          name: artifact-${{ matrix.os }}-${{ matrix.arch }}
          path: ${{ env.app }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz
        if: matrix.os != 'windows'

  build-debian-packages:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.4.0
      - uses: actions/setup-go@v2.1.5
        with:
          go-version: ${{ env.goversion }}
      - run: go build ${{ env.build_opts }}
      - name: Create package
        run: |
          mkdir -p .debpkg/usr/bin
          cp -p ./${{ env.app }} .debpkg/usr/bin/
      - uses: jiro4989/build-deb-action@v2
        with:
          package: ${{ env.app }}
          package_root: .debpkg
          maintainer: jiro4989
          version: ${{ github.ref }}
          arch: 'amd64'
          desc: '${{ env.app }} is command to convert from color text (ANSI or 256) to image.'
      - uses: actions/upload-artifact@v2
        with:
          name: artifact-deb
          path: |
            ./*.deb

  build-rpm-packages:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.4.0
      - uses: actions/setup-go@v2.1.5
        with:
          go-version: ${{ env.goversion }}
      - run: go build ${{ env.build_opts }}
      - name: Create package
        run: |
          mkdir -p .rpmpkg/usr/bin
          cp -p ./${{ env.app }} .rpmpkg/usr/bin/
      - uses: jiro4989/build-rpm-action@v2
        with:
          summary: '${{ env.app }} is command to convert from color text (ANSI or 256) to image.'
          package: ${{ env.app }}
          package_root: .rpmpkg
          maintainer: jiro4989
          version: ${{ github.ref }}
          arch: 'x86_64'
          desc: '${{ env.app }} is command to convert from color text (ANSI or 256) to image.'
      - uses: actions/upload-artifact@v2
        with:
          name: artifact-rpm
          path: |
            ./*.rpm
            !./*-debuginfo-*.rpm

  create-release:
    runs-on: ubuntu-latest
    needs:
      - build-artifact
      - build-debian-packages
      - build-rpm-packages
    steps:
      - uses: actions/checkout@v2.4.0
      - name: Generate changelog
        run: |
          wget https://github.com/git-chglog/git-chglog/releases/download/0.9.1/git-chglog_linux_amd64
          chmod +x git-chglog_linux_amd64
          mv git-chglog_linux_amd64 git-chglog
          ./git-chglog --output ./changelog $(git describe --tags $(git rev-list --tags --max-count=1))

      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body_path: ./changelog
          draft: false
          prerelease: false

      - name: Write upload_url to file
        run: echo '${{ steps.create-release.outputs.upload_url }}' > upload_url.txt

      - uses: actions/upload-artifact@v2
        with:
          name: create-release
          path: upload_url.txt

  upload-release:
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        os: [linux, windows, darwin]
        arch: [amd64]
        include:
          - os: windows
            asset_content_type: application/zip
          - os: linux
            asset_content_type: application/gzip
          - os: darwin
            asset_content_type: application/gzip
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact-${{ matrix.os }}-${{ matrix.arch }}

      - uses: actions/download-artifact@v2
        with:
          name: create-release

      - id: vars
        run: |
          echo "::set-output name=upload_url::$(cat upload_url.txt)"
          echo "::set-output name=asset_name::$(ls ${{ env.app }}-${{ matrix.os }}-${{ matrix.arch }}.* | head -n 1)"

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.vars.outputs.upload_url }}
          asset_path: ${{ steps.vars.outputs.asset_name }}
          asset_name: ${{ steps.vars.outputs.asset_name }}
          asset_content_type: ${{ matrix.asset_content_type }}

  upload-linux-package:
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        include:
          - pkg: deb
            asset_content_type: application/vnd.debian.binary-package
          - pkg: rpm
            asset_content_type: application/x-rpm
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact-${{ matrix.pkg }}

      - uses: actions/download-artifact@v2
        with:
          name: create-release

      - id: vars
        run: |
          echo "::set-output name=upload_url::$(cat upload_url.txt)"
          echo "::set-output name=asset_name::$(ls *.${{ matrix.pkg }} | head -n 1)"

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.vars.outputs.upload_url }}
          asset_path: ${{ steps.vars.outputs.asset_name }}
          asset_name: ${{ steps.vars.outputs.asset_name }}
          asset_content_type: ${{ matrix.asset_content_type }}
